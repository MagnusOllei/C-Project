#include <iostream>
#include <limits>

using namespace std;

const int WIDTH = 20;
const int HEIGHT = 10;
const int NUM_HOLES = 9;
const char PATH = '-';
const char OBSTACLE = '#';
const char BALL = 'o';
const char HOLE = 'X';

struct Ball {
    int x, y;
};

struct Hole {
    int x, y;
    int par;
};

// Predefined Ball Positions
Ball ballPositions[NUM_HOLES] = {
    {1, 1}, {0, 0}, {0, 0}, {0, 0}, {0, 8}, {17, 8}, {0, 9}, {7, 2}, {1, 9}
};

// Predefined Hole Positions & Pars
Hole holes[NUM_HOLES] = {
    {18, 8, 4}, {19, 9, 6}, {19, 0, 6}, {19, 9, 5}, {19, 1, 7}, 
    {6, 1, 4}, {7, 1, 6}, {18, 1, 5}, {19, 9, 24}
};

// Predefined Courses
char courses[NUM_HOLES][HEIGHT][WIDTH + 1] = {
    {"--------------------",
     "--------------------",
     "--------------------",
     "--------------------",
     "--------------------",
     "--------------------",
     "--------------------",
     "--------------------",
     "--------------------",
     "--------------------"},

    {"-------------#####--",
     "--------------------",
     "-----#####----------",
     "--------------------",
     "----------#####-----",
     "--------------------",
     "#####---------------",
     "-----------#####----",
     "--------------------",
     "-#####--------------"},

    {"----------#---------",
     "----------#---------",
     "----------#---------",
     "----------#---------",
     "----------#---------",
     "----------#---------",
     "--------------------",
     "--------------------",
     "--------------------",
     "--------------------"},

    {"-----#--------------",
     "-----#--------------",
     "-----#--------------",
     "--------------------",
     "----############----",
     "--------------------",
     "--------------------",
     "--------------#-----",
     "--------------#-----",
     "--------------#-----"},

    {"-------------------#",
     "--------#---------#-",
     "-------#---------#--",
     "------#---------#---",
     "-----#---------#----",
     "----#---------#-----",
     "---#---------#------",
     "--#---------#-------",
     "-#---------#--------",
     "#-------------------"},

    {"--#########---------",
     "--#-------#---------",
     "--#-------#---------",
     "--#-------#---------",
     "--#-------#---------",
     "--#-------#---------",
     "--#-------#---------",
     "--#-------##########",
     "--#----------------#",
     "--##################"},

    {"------######--------",
     "------#-------------",
     "------######--------",
     "--------------------",
     "--------------------",
     "--------------------",
     "--------------------",
     "--------------------",
     "--------------------",
     "--------------------"},

    {"--------------------",
     "-----#####----------",
     "-----#---#----------",
     "-----#---#----------",
     "-----#---#----------",
     "-----#---#----------",
     "-----#---#----------",
     "--------------------",
     "--------------------",
     "--------------------"},

    {"#---#---#---#---#---",
     "#-#-#-#-#-#-#-#-#-#-",
     "#-#-#-#-#-#-#-#-#-#-",
     "#-#-#-#-#-#-#-#-#-#-",
     "#-#-#-#-#-#-#-#-#-#-",
     "#-#-#-#-#-#-#-#-#-#-",
     "#-#-#-#-#-#-#-#-#-#-",
     "#-#-#-#-#-#-#-#-#-#-",
     "#-#-#-#-#-#-#-#-#-#-",
     "#-#---#---#---#---#-"}

};

void displayCourse(Ball ball, int holeNum) {
    for (int y = 0; y < HEIGHT; y++) {
        for (int x = 0; x < WIDTH; x++) {
            if (x == ball.x && y == ball.y)
                cout << BALL;
            else if (x == holes[holeNum].x && y == holes[holeNum].y)
                cout << HOLE;
            else
                cout << courses[holeNum][y][x];
        }
        cout << endl;
    }
}

bool isValidMove(Ball ball, int dx, int dy, int force, int holeNum) {
    for (int i = 1; i <= force; i++) {
        int newX = ball.x + dx * i;
        int newY = ball.y + dy * i;

        // Check if the new position is out of bounds
        if (newX < 0 || newX >= WIDTH || newY < 0 || newY >= HEIGHT) {
            return false;
        }

        // Check if there's an obstacle at the new position
        if (courses[holeNum][newY][newX] == OBSTACLE) {
            return false;
        }
    }

    return true;
}

void moveBall(Ball &ball, int holeNum, char direction, int force, int &strokes) {
    int dx = 0, dy = 0;
    switch (direction) {
        case 'u': dy = -1; break;
        case 'd': dy = 1; break;
        case 'l': dx = -1; break;
        case 'r': dx = 1; break;
        default: return;
    }

    // Every attempt to move the ball increases the stroke count
    strokes++;

    if (isValidMove(ball, dx, dy, force, holeNum)) {
        ball.x += dx * force;
        ball.y += dy * force;
    } else {
        cout << "Invalid move: Out of bounds or hit an obstacle! Try again.\n";
    }
}

void getValidInput(char &direction, int &force) {
    while (true) {
        cout << "Enter direction (u/d/l/r): ";
        cin >> direction;
        if (direction == 'u' || direction == 'd' || direction == 'l' || direction == 'r') break;
        cout << "Invalid direction! Please enter 'u', 'd', 'l', or 'r'.\n";
    }

    while (true) {
        cout << "Enter force (1-10): ";
        cin >> force;
        if (force >= 1 && force <= 10) break;
        cout << "Invalid force! Enter a number between 1 and 10.\n";
    }
}

string getScoreTerm(int strokes, int par) {
    int diff = strokes - par;
    if (diff <= -5) return "Phoenix!";
    if (diff == -4) return "Ostrich!";
    if (diff == -3) return "Albatross!";
    if (diff == -2) return "Eagle!";
    if (diff == -1) return "Birdie!";
    if (diff == 0) return "Par!";
    if (diff == 1) return "Bogey!";
    if (diff == 2) return "Double Bogey!";
    if (diff == 3) return "Triple Bogey!";
    return to_string(diff) + " Over Par!";
}

int main() {
    // Intro message
    cout << "Welcome to Console Mini Golf!\n";
    cout << "Enter 'u' for up, 'd' for down, 'l' for left, and 'r' for right.\n";
    cout << "You can adjust the force (1-10) to control how far the ball moves.\n";

    int totalScore = 0;
    for (int i = 0; i < NUM_HOLES; i++) {
        Ball ball = ballPositions[i];
        int strokes = 0;
        cout << "\nStarting Hole " << i + 1 << " (Par " << holes[i].par << ")\n";
        displayCourse(ball, i);

        // Inform about obstacles after Hole 1
        if (i == 1) {
            cout << "Avoid hitting obstacles (#) on the way to the hole!\n";
        }

        while (ball.x != holes[i].x || ball.y != holes[i].y) {
            char direction;
            int force;
            getValidInput(direction, force);
            moveBall(ball, i, direction, force, strokes);
            displayCourse(ball, i);
        }

        cout << "Completed Hole " << i + 1 << " in " << strokes << " strokes! " 
             << getScoreTerm(strokes, holes[i].par) << "\n";
        totalScore += strokes;
    }

    // Final congratulations message
    int totalPar = 0;
    for (int i = 0; i < NUM_HOLES; i++) {
        totalPar += holes[i].par;
    }
    int underPar = totalPar - totalScore;
    cout << "\nCongratulations! You've completed the game!\n";
    cout << "Your total score: " << totalScore << " strokes.\n";
    cout << "You are " << (underPar >= 0 ? underPar : -underPar) << (underPar >= 0 ? " under par!" : " over par!") << endl;

    return 0;
}
